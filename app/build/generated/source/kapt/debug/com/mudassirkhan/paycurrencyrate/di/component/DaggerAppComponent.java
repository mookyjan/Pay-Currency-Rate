// Generated by Dagger (https://dagger.dev).
package com.mudassirkhan.paycurrencyrate.di.component;

import android.app.Application;
import android.content.Context;
import androidx.lifecycle.ViewModel;
import com.mudassirkhan.data.remote.RemoteDataSource;
import com.mudassirkhan.data.remote.api.CurrencyApiService;
import com.mudassirkhan.data.repositories.CurrencyRepository;
import com.mudassirkhan.domain.Schedulers;
import com.mudassirkhan.domain.gateway.CurrencyRateGateway;
import com.mudassirkhan.domain.interactor.GetCurrencyRateListUseCase;
import com.mudassirkhan.paycurrencyrate.PayCurrencyRateApp;
import com.mudassirkhan.paycurrencyrate.PayCurrencyRateApp_MembersInjector;
import com.mudassirkhan.paycurrencyrate.di.module.AppModule;
import com.mudassirkhan.paycurrencyrate.di.module.AppModule_ProvideSchedulers$app_debugFactory;
import com.mudassirkhan.paycurrencyrate.di.module.DataModule;
import com.mudassirkhan.paycurrencyrate.di.module.DataModule_ProvideCurrencyRateGateway$app_debugFactory;
import com.mudassirkhan.paycurrencyrate.di.module.DataModule_ProvideCurrencyRateRepository$app_debugFactory;
import com.mudassirkhan.paycurrencyrate.di.module.DataModule_ProvideRemoteDataSource$app_debugFactory;
import com.mudassirkhan.paycurrencyrate.di.module.DomainModule;
import com.mudassirkhan.paycurrencyrate.di.module.DomainModule_ProvideCurrencyRateUseCaseFactory;
import com.mudassirkhan.paycurrencyrate.di.module.FragmentModule_EngineerListFragment$app_debug;
import com.mudassirkhan.paycurrencyrate.di.module.NetworkModule;
import com.mudassirkhan.paycurrencyrate.di.module.NetworkModule_ProvideOkHttpClient$app_debugFactory;
import com.mudassirkhan.paycurrencyrate.di.module.NetworkModule_ProvideWheelAPI$app_debugFactory;
import com.mudassirkhan.paycurrencyrate.di.module.ViewModelFactory;
import com.mudassirkhan.paycurrencyrate.ui.currencyratelist.CurrencyRateListFragment;
import com.mudassirkhan.paycurrencyrate.ui.currencyratelist.CurrencyRateListFragment_MembersInjector;
import com.mudassirkhan.paycurrencyrate.ui.currencyratelist.CurrencyRateListViewModel;
import com.mudassirkhan.paycurrencyrate.ui.currencyratelist.CurrencyRateListViewModel_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<FragmentModule_EngineerListFragment$app_debug.CurrencyRateListFragmentSubcomponent.Factory> currencyRateListFragmentSubcomponentFactoryProvider;

  private Provider<Schedulers> provideSchedulers$app_debugProvider;

  private Provider<OkHttpClient> provideOkHttpClient$app_debugProvider;

  private Provider<CurrencyApiService> provideWheelAPI$app_debugProvider;

  private Provider<RemoteDataSource> provideRemoteDataSource$app_debugProvider;

  private Provider<CurrencyRepository> provideCurrencyRateRepository$app_debugProvider;

  private Provider<CurrencyRateGateway> provideCurrencyRateGateway$app_debugProvider;

  private Provider<GetCurrencyRateListUseCase> provideCurrencyRateUseCaseProvider;

  private Provider<CurrencyRateListViewModel> currencyRateListViewModelProvider;

  private DaggerAppComponent(AppModule appModuleParam, NetworkModule networkModuleParam,
      DataModule dataModuleParam, DomainModule domainModuleParam, Application application,
      Context context) {

    initialize(appModuleParam, networkModuleParam, dataModuleParam, domainModuleParam, application, context);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(CurrencyRateListFragment.class, (Provider) currencyRateListFragmentSubcomponentFactoryProvider);}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
      ) {
    return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(CurrencyRateListViewModel.class, (Provider) currencyRateListViewModelProvider);}

  private ViewModelFactory getViewModelFactory() {
    return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam, final NetworkModule networkModuleParam,
      final DataModule dataModuleParam, final DomainModule domainModuleParam,
      final Application application, final Context context) {
    this.currencyRateListFragmentSubcomponentFactoryProvider = new Provider<FragmentModule_EngineerListFragment$app_debug.CurrencyRateListFragmentSubcomponent.Factory>() {
      @Override
      public FragmentModule_EngineerListFragment$app_debug.CurrencyRateListFragmentSubcomponent.Factory get(
          ) {
        return new CurrencyRateListFragmentSubcomponentFactory();}
    };
    this.provideSchedulers$app_debugProvider = DoubleCheck.provider(AppModule_ProvideSchedulers$app_debugFactory.create(appModuleParam));
    this.provideOkHttpClient$app_debugProvider = DoubleCheck.provider(NetworkModule_ProvideOkHttpClient$app_debugFactory.create(networkModuleParam));
    this.provideWheelAPI$app_debugProvider = DoubleCheck.provider(NetworkModule_ProvideWheelAPI$app_debugFactory.create(networkModuleParam, provideOkHttpClient$app_debugProvider));
    this.provideRemoteDataSource$app_debugProvider = DoubleCheck.provider(DataModule_ProvideRemoteDataSource$app_debugFactory.create(dataModuleParam, provideWheelAPI$app_debugProvider));
    this.provideCurrencyRateRepository$app_debugProvider = DoubleCheck.provider(DataModule_ProvideCurrencyRateRepository$app_debugFactory.create(dataModuleParam, provideRemoteDataSource$app_debugProvider));
    this.provideCurrencyRateGateway$app_debugProvider = DoubleCheck.provider(DataModule_ProvideCurrencyRateGateway$app_debugFactory.create(dataModuleParam, provideCurrencyRateRepository$app_debugProvider));
    this.provideCurrencyRateUseCaseProvider = DomainModule_ProvideCurrencyRateUseCaseFactory.create(domainModuleParam, provideSchedulers$app_debugProvider, provideCurrencyRateGateway$app_debugProvider);
    this.currencyRateListViewModelProvider = CurrencyRateListViewModel_Factory.create(provideCurrencyRateUseCaseProvider);
  }

  @Override
  public void inject(PayCurrencyRateApp application) {
    injectPayCurrencyRateApp(application);}

  private PayCurrencyRateApp injectPayCurrencyRateApp(PayCurrencyRateApp instance) {
    PayCurrencyRateApp_MembersInjector.injectActivityDispatcher(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    private Context context;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public Builder context(Context context) {
      this.context = Preconditions.checkNotNull(context);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      Preconditions.checkBuilderRequirement(context, Context.class);
      return new DaggerAppComponent(new AppModule(), new NetworkModule(), new DataModule(), new DomainModule(), application, context);
    }
  }

  private final class CurrencyRateListFragmentSubcomponentFactory implements FragmentModule_EngineerListFragment$app_debug.CurrencyRateListFragmentSubcomponent.Factory {
    @Override
    public FragmentModule_EngineerListFragment$app_debug.CurrencyRateListFragmentSubcomponent create(
        CurrencyRateListFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new CurrencyRateListFragmentSubcomponentImpl(arg0);
    }
  }

  private final class CurrencyRateListFragmentSubcomponentImpl implements FragmentModule_EngineerListFragment$app_debug.CurrencyRateListFragmentSubcomponent {
    private CurrencyRateListFragmentSubcomponentImpl(CurrencyRateListFragment arg0) {

    }

    @Override
    public void inject(CurrencyRateListFragment arg0) {
      injectCurrencyRateListFragment(arg0);}

    private CurrencyRateListFragment injectCurrencyRateListFragment(
        CurrencyRateListFragment instance) {
      CurrencyRateListFragment_MembersInjector.injectViewModeFactory(instance, DaggerAppComponent.this.getViewModelFactory());
      return instance;
    }
  }
}
