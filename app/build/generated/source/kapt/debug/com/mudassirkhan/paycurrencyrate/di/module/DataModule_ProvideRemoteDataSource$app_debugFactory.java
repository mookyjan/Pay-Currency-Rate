// Generated by Dagger (https://dagger.dev).
package com.mudassirkhan.paycurrencyrate.di.module;

import com.mudassirkhan.data.remote.RemoteDataSource;
import com.mudassirkhan.data.remote.api.CurrencyApiService;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataModule_ProvideRemoteDataSource$app_debugFactory implements Factory<RemoteDataSource> {
  private final DataModule module;

  private final Provider<CurrencyApiService> currencyApiServiceProvider;

  public DataModule_ProvideRemoteDataSource$app_debugFactory(DataModule module,
      Provider<CurrencyApiService> currencyApiServiceProvider) {
    this.module = module;
    this.currencyApiServiceProvider = currencyApiServiceProvider;
  }

  @Override
  public RemoteDataSource get() {
    return provideRemoteDataSource$app_debug(module, currencyApiServiceProvider.get());
  }

  public static DataModule_ProvideRemoteDataSource$app_debugFactory create(DataModule module,
      Provider<CurrencyApiService> currencyApiServiceProvider) {
    return new DataModule_ProvideRemoteDataSource$app_debugFactory(module, currencyApiServiceProvider);
  }

  public static RemoteDataSource provideRemoteDataSource$app_debug(DataModule instance,
      CurrencyApiService currencyApiService) {
    return Preconditions.checkNotNull(instance.provideRemoteDataSource$app_debug(currencyApiService), "Cannot return null from a non-@Nullable @Provides method");
  }
}
