// Generated by Dagger (https://dagger.dev).
package com.mudassirkhan.paycurrencyrate.di.module;

import com.mudassirkhan.domain.Schedulers;
import com.mudassirkhan.domain.gateway.CurrencyRateGateway;
import com.mudassirkhan.domain.interactor.GetCurrencyRateListUseCase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DomainModule_ProvideCurrencyRateUseCaseFactory implements Factory<GetCurrencyRateListUseCase> {
  private final DomainModule module;

  private final Provider<Schedulers> schedulersProvider;

  private final Provider<CurrencyRateGateway> currencyRateGatewayProvider;

  public DomainModule_ProvideCurrencyRateUseCaseFactory(DomainModule module,
      Provider<Schedulers> schedulersProvider,
      Provider<CurrencyRateGateway> currencyRateGatewayProvider) {
    this.module = module;
    this.schedulersProvider = schedulersProvider;
    this.currencyRateGatewayProvider = currencyRateGatewayProvider;
  }

  @Override
  public GetCurrencyRateListUseCase get() {
    return provideCurrencyRateUseCase(module, schedulersProvider.get(), currencyRateGatewayProvider.get());
  }

  public static DomainModule_ProvideCurrencyRateUseCaseFactory create(DomainModule module,
      Provider<Schedulers> schedulersProvider,
      Provider<CurrencyRateGateway> currencyRateGatewayProvider) {
    return new DomainModule_ProvideCurrencyRateUseCaseFactory(module, schedulersProvider, currencyRateGatewayProvider);
  }

  public static GetCurrencyRateListUseCase provideCurrencyRateUseCase(DomainModule instance,
      Schedulers schedulers, CurrencyRateGateway currencyRateGateway) {
    return Preconditions.checkNotNull(instance.provideCurrencyRateUseCase(schedulers, currencyRateGateway), "Cannot return null from a non-@Nullable @Provides method");
  }
}
