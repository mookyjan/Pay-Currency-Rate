// Generated by Dagger (https://dagger.dev).
package com.mudassirkhan.paycurrencyrate.di.module;

import com.mudassirkhan.data.repositories.CurrencyRepository;
import com.mudassirkhan.domain.gateway.CurrencyRateGateway;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataModule_ProvideCurrencyRateGateway$app_debugFactory implements Factory<CurrencyRateGateway> {
  private final DataModule module;

  private final Provider<CurrencyRepository> currencyRepositoryProvider;

  public DataModule_ProvideCurrencyRateGateway$app_debugFactory(DataModule module,
      Provider<CurrencyRepository> currencyRepositoryProvider) {
    this.module = module;
    this.currencyRepositoryProvider = currencyRepositoryProvider;
  }

  @Override
  public CurrencyRateGateway get() {
    return provideCurrencyRateGateway$app_debug(module, currencyRepositoryProvider.get());
  }

  public static DataModule_ProvideCurrencyRateGateway$app_debugFactory create(DataModule module,
      Provider<CurrencyRepository> currencyRepositoryProvider) {
    return new DataModule_ProvideCurrencyRateGateway$app_debugFactory(module, currencyRepositoryProvider);
  }

  public static CurrencyRateGateway provideCurrencyRateGateway$app_debug(DataModule instance,
      CurrencyRepository currencyRepository) {
    return Preconditions.checkNotNull(instance.provideCurrencyRateGateway$app_debug(currencyRepository), "Cannot return null from a non-@Nullable @Provides method");
  }
}
