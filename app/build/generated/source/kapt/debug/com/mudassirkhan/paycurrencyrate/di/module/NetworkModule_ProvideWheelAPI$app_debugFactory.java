// Generated by Dagger (https://dagger.dev).
package com.mudassirkhan.paycurrencyrate.di.module;

import com.mudassirkhan.data.remote.api.CurrencyApiService;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideWheelAPI$app_debugFactory implements Factory<CurrencyApiService> {
  private final NetworkModule module;

  private final Provider<OkHttpClient> okHttpClientProvider;

  public NetworkModule_ProvideWheelAPI$app_debugFactory(NetworkModule module,
      Provider<OkHttpClient> okHttpClientProvider) {
    this.module = module;
    this.okHttpClientProvider = okHttpClientProvider;
  }

  @Override
  public CurrencyApiService get() {
    return provideWheelAPI$app_debug(module, okHttpClientProvider.get());
  }

  public static NetworkModule_ProvideWheelAPI$app_debugFactory create(NetworkModule module,
      Provider<OkHttpClient> okHttpClientProvider) {
    return new NetworkModule_ProvideWheelAPI$app_debugFactory(module, okHttpClientProvider);
  }

  public static CurrencyApiService provideWheelAPI$app_debug(NetworkModule instance,
      OkHttpClient okHttpClient) {
    return Preconditions.checkNotNull(instance.provideWheelAPI$app_debug(okHttpClient), "Cannot return null from a non-@Nullable @Provides method");
  }
}
